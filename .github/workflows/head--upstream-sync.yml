name: "Sync our 'head' with upstream HEAD"

on:
  schedule:
    - cron: '42/15 * * * *'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow_ref }}

jobs:
  pull:
    name: Sync with upstream
    runs-on: ubuntu-latest

    environment: sysops-upstream-sync

    permissions:
      contents: write

    defaults:
      run:
        shell: bash --noprofile --norc -o errexit -o pipefail -o nounset -o verbose -o xtrace {0}

    env:
      UPSTREAM_SYNC_LOCAL_BRANCH: ${{ vars.UPSTREAM_SYNC_LOCAL_BRANCH }}
      UPSTREAM_SYNC_REMOTE_NAME: ${{ vars.UPSTREAM_SYNC_REMOTE_NAME }}
      UPSTREAM_SYNC_REMOTE_URL: ${{ vars.UPSTREAM_SYNC_REMOTE_URL }}
      UPSTREAM_SYNC_GIT_CONFIG_COLOR_UI: ${{ vars.UPSTREAM_SYNC_GIT_CONFIG_COLOR_UI }}

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ vars.UPSTREAM_SYNC_LOCAL_BRANCH }}
        sparse-checkout: '.'

    - name: Config
      run: |
        export GIT_LOG="$HOME/git.log"
        git_n_log() {
          printf "git@actions> " >> "${GIT_LOG}"
          printf "'%s' " git "${@}" >> "${GIT_LOG}"
          printf "\n" >> "${GIT_LOG}"
          git "${@}"
        }
        declare -p -f > ~/funcs.sh

    - name: Add remote
      run: |
        [[  -n  "${UPSTREAM_SYNC_REMOTE_NAME}"  ]]
        [[  -n  "${UPSTREAM_SYNC_REMOTE_URL}"  ]]
        source ~/funcs.sh
        git_n_log  remote  add  "${UPSTREAM_SYNC_REMOTE_NAME}" "${UPSTREAM_SYNC_REMOTE_URL}"
        git_n_log  remote  --verbose  ||  true
        git_n_log  remote  show  "${UPSTREAM_SYNC_REMOTE_NAME}"  ||  true
        git_n_log  config  --show-scope  --get-regexp  ^  2>&1  |  sed  's/^/::debug::/'  ||  true

    - name: Pull
      run: |
        [[  -n  "${UPSTREAM_SYNC_REMOTE_NAME}"  ]]
        source  ~/funcs.sh
        git_n_log  pull  "${UPSTREAM_SYNC_REMOTE_NAME}"  "HEAD"

    - name: Push
      run: |
        [[  -n  "${UPSTREAM_SYNC_LOCAL_BRANCH}"  ]]
        source  ~/funcs.sh
        git_n_log  push  origin  "${UPSTREAM_SYNC_LOCAL_BRANCH}"

    - name: Summary
      if: ${{  always()  }}
      continue-on-error: true
      run: |
        echo "# Hello world!" >> "${GITHUB_STEP_SUMMARY}"
        printf "%s\n" '```console' >> "${GITHUB_STEP_SUMMARY}"
        cat "${GIT_LOG}" | sed 's/```/\```/' >> "${GITHUB_STEP_SUMMARY}"
        printf "%s\n" '```' >> "${GITHUB_STEP_SUMMARY}"
        printf "%s\n" >> "${GITHUB_STEP_SUMMARY}"
