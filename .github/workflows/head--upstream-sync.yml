name: "Sync our 'head' with upstream HEAD"

on:
  schedule:
    - cron: '42/15 * * * *'
  push:
    paths:
    - .github/workflows/head--upstream-sync.yml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow_ref }}

jobs:
  pull:
    name: Sync with upstream
    runs-on: ubuntu-latest

    environment: sysops-upstream-sync

    permissions:
      contents: write

    defaults:
      run:
        shell: bash --noprofile --norc -o errexit -o pipefail -o nounset -o verbose -o xtrace {0}

    env:
      UPSTREAM_SYNC_LOCAL_BRANCH: ${{ vars.UPSTREAM_SYNC_LOCAL_BRANCH }}
      UPSTREAM_SYNC_REMOTE_NAME: ${{ vars.UPSTREAM_SYNC_REMOTE_NAME }}
      UPSTREAM_SYNC_REMOTE_URL: ${{ vars.UPSTREAM_SYNC_REMOTE_URL }}
      UPSTREAM_SYNC_GIT_CONFIG_COLOR_UI: ${{ vars.UPSTREAM_SYNC_GIT_CONFIG_COLOR_UI }}

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ vars.UPSTREAM_SYNC_LOCAL_BRANCH }}
        sparse-checkout: '.'

    - name: Config
      run: |
        export GIT_LOG_DIR="$HOME/git-logs"
        printf "GIT_LOG_DIR=%s\n" "${GIT_LOG_DIR}" >> "${GITHUB_ENV}"
        mkdir -vp "${GIT_LOG_DIR}"
        
        export GIT_LOG="$HOME/git.log"
        printf "GIT_LOG=%s\n" "${GIT_LOG}" >> "${GITHUB_ENV}"

        run_n_log() {
          local log_fn_base="$(date +%s%N)"
          local stdout_log="${log_fn_base}.stdout.log"
          local stderr_log="${log_fn_base}.stderr.log"
          local cmd_str=$(
            for (( i = 1 ; i < $# ; i++ )) ; do
              [[ "${!i}" =~ [[:space:]] ]] && printf "\x27%s\x27" "${!i}" || printf "%s" "${!i}"
              (( i < $# - 1 )) && printf " " || true ; done ; )
          printf "<details><summary><code>%s</code></summary>\n" "${cmd_str}" >> "${GITHUB_STEP_SUMMARY}"
          printf '\n```console\n' >> "${GITHUB_STEP_SUMMARY}"
          printf "git@actions> %s\n" "${cmd_str}" >> "${GITHUB_STEP_SUMMARY}"
          printf "%s\n" "${cmd_str}"
          "${@}" > >(tee -a "${stdout_log}" "${GITHUB_STEP_SUMMARY}" | sed 's/^//')  2> >(tee -a "${stderr_log}" "${GITHUB_STEP_SUMMARY}" | sed 's/^/::warning title=::/')
          sleep 0.1 || true  # wait for all the subshells to stop writing to files
          printf '\n```\n</details>\n' >> "${GITHUB_STEP_SUMMARY}"
        }

        declare -p -f > ~/funcs.sh

    - name: Add remote
      run: |
        [[  -n  "${UPSTREAM_SYNC_REMOTE_NAME}"  ]]
        [[  -n  "${UPSTREAM_SYNC_REMOTE_URL}"  ]]
        source ~/funcs.sh
        run_n_log  git  remote  add  "${UPSTREAM_SYNC_REMOTE_NAME}" "${UPSTREAM_SYNC_REMOTE_URL}"
        run_n_log  git  remote  --verbose  ||  true
        run_n_log  git  remote  show  "${UPSTREAM_SYNC_REMOTE_NAME}"  ||  true
        run_n_log  git  config  --show-scope  --get-regexp  ^  2>&1  |  sed  's/^/::debug::/'  ||  true

    - name: Pull
      run: |
        [[  -n  "${UPSTREAM_SYNC_REMOTE_NAME}"  ]]
        source  ~/funcs.sh
        run_n_log  git  pull  "${UPSTREAM_SYNC_REMOTE_NAME}"  "HEAD"

    - name: Push
      run: |
        [[  -n  "${UPSTREAM_SYNC_LOCAL_BRANCH}"  ]]
        source  ~/funcs.sh
        run_n_log  git  push  origin  "${UPSTREAM_SYNC_LOCAL_BRANCH}"

    - name: Summary
      if: ${{  always()  }}
      continue-on-error: true
      run: |
        tree "${GIT_LOG_DIR}" || true
        # echo "# Hello world!" >> "${GITHUB_STEP_SUMMARY}"
        #printf "%s\n" '```console' >> "${GITHUB_STEP_SUMMARY}"
        #cat "${GIT_LOG}" | sed 's/```/\```/' >> "${GITHUB_STEP_SUMMARY}"
        #printf "%s\n" '```' >> "${GITHUB_STEP_SUMMARY}"
        #printf "%s\n" >> "${GITHUB_STEP_SUMMARY}"
